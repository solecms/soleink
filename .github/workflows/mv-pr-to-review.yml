name: Move PR to Review

on:
  pull_request:
    types: [opened]

jobs:
  move-card:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Move PR to Review
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const projectOwner = 'solecms';
          const projectNumber = 3;
          const columnName = 'Review/QA';
          
          // Get the project ID from the user's projects
          const { user } = await github.graphql(`
            query($owner: String!) {
              user(login: $owner) {
                projectsV2(first: 100) {
                  nodes {
                    id
                    title
                  }
                }
              }
            }
          `, {
            owner: projectOwner
          });
          
          // Fallback: Get the project ID from the organization's projects if not found in user projects
          const { organization } = await github.graphql(`
            query($owner: String!) {
              organization(login: $owner) {
                projectsV2(first: 100) {
                  nodes {
                    id
                    title
                  }
                }
              }
            }
          `, {
            owner: projectOwner
          });

          const projects = (user?.projectsV2?.nodes ?? []).concat(organization?.projectsV2?.nodes ?? []);
          console.log("Projects Response:", projects);

          const project = projects.find(proj => proj.title === `Project ${projectNumber}`);
          if (!project) {
            throw new Error(`Project number '${projectNumber}' not found for owner '${projectOwner}'`);
          }

          const projectId = project.id;

          // Get the column ID
          const { projectV2 } = await github.graphql(`
            query($projectId: ID!) {
              projectV2(id: $projectId) {
                views(first: 100) {
                  nodes {
                    id
                    name
                  }
                }
              }
            }
          `, {
            projectId: projectId
          });

          console.log("ProjectV2 Response:", projectV2);
          const column = projectV2.views.nodes.find(view => view.name === columnName);
          if (!column) {
            throw new Error(`Column '${columnName}' not found in project '${projectNumber}'`);
          }

          const columnId = column.id;

          // Get the PR ID
          const prId = context.payload.pull_request.node_id;

          // Add the PR to the project
          await github.graphql(`
            mutation($projectId: ID!, $prId: ID!, $columnId: ID!) {
              addProjectV2ItemById(input: {projectId: $projectId, contentId: $prId, fieldId: $columnId}) {
                item {
                  id
                }
              }
            }
          `, {
            projectId: projectId,
            prId: prId,
            columnId: columnId
          });

          console.log(`Successfully added PR ${prId} to project ${projectId} under column ${columnId}`);
